#!/usr/bin/env ruby
# frozen_string_literal: true

require "bundler/setup"
require "json"
require "pathname"
require "fileutils"

# Build API docs
class Builder
  def call(versions)
    generate_index(versions)
    generate_docs(versions)
  end

  private

  def generate_index(versions)
    latest_stable_version = versions.keys.max
    template              = "index-template.html"
    target                = Pathname.new("docs").join("index.html")

    target.dirname.mkdir unless target.dirname.exist?

    contents = File.read(template).gsub("${latest_stable_version}", latest_stable_version)
    target.write(contents)
  end

  def generate_docs(versions)
    versions.each do |hanami_version, gems|
      generate_docs_for_version(hanami_version, gems)
    end
  end

  def generate_docs_for_version(hanami_version, gems)
    target = Pathname.new("docs").join(hanami_version)

    if target.exist?
      puts "API docs for Hanami v#{hanami_version} already generated.. skipping"
      return
    end

    puts "Processing v#{hanami_version}.."
    install_hanami_gems(gems)
    generate_api_docs(hanami_version, target)
  end

  def install_hanami_gems(gems)
    target = Pathname.new("gems")
    FileUtils.remove_entry_secure(target) if target.exist?
    target.mkdir

    gems.each do |name, version|
      `gem uninstall -axI #{name}`
      `gem install --prerelease --force --no-document --install-dir=#{target} #{name}:#{version}`
    end
  end

  def generate_api_docs(hanami_version, target)
    sources = "gems/gems/hanami*/lib/**/*"
    title = "Hanami API docs | v#{hanami_version}"

    `bundle exec yardoc --no-cache --no-save --protected --private --no-api private --markup markdown --readme=source/README.md --locale=en --title="#{title}" --template-path . --template template --output-dir #{target} #{sources}`
  end
end

versions = JSON.parse(File.read("versions.json")).freeze
Builder.new.call(versions)
